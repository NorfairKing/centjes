- ignore:
    name: "Use ++"
- ignore:
    name: "Redundant lambda"
- ignore:
    name: "Redundant if"
- ignore:
    name: "Use newtype instead of data"
- ignore:
    name: "Use underscore"
- ignore:
    name: "Use tuple-section"
- ignore:
    name: "Use unless"


# Functions that we dissallow.
# Note that you _can_ add exceptions to these hints, but those exceptions should be thorougly reviewed.
- functions:
  - {name: unsafeDupablePerformIO, within: []} # Unsafe
  - {name: unsafeInterleaveIO, within: []} # Unsafe
  - {name: unsafeFixIO, within: []} # Unsafe
  - name: unsafePerformIO # Unsafe
    within:
    - Smos.API.SHA256

  - {name: forkIO, within: []} # Hard to get right, use the async library instead.

  - {name: throw, within: []} # Don't throw from pure code, use throwIO instead.


  - {name: Data.List.head, within: []} # Partial
  - {name: Data.List.tail, within: []} # Partial
  - {name: Data.List.init, within: []} # Partial
  - {name: Data.List.last, within: []} # Partial
  - {name: '!!', within: []} # Partial

  - {name: until, within: []} # Really confusing, use 'when' instead.

  - name: toEnum # Partial
    within:
    - Smos.Report.TimeBlock

  - {name: Data.Foldable.foldl, within: []} # Lazy. Use foldl' instead.

  # Don't use strings to interact with files
  - {name: System.IO.readFile, within: []}
  - {name: System.IO.writeFile, within: []}
  - {name: System.IO.appendFile, within: []}

  # Don't use string for command-line output.
  - {name: System.IO.putStr, within: []}
  - {name: System.IO.print, within: []}
  - name: System.IO.putChar
    within:
    - Smos.Sync.Client.Prompt

  # Don't use string for command-line input either.
  - {name: System.IO.getChar, within: []}
  - {name: System.IO.getLine, within: []}
  - {name: System.IO.getContents, within: []} # Does lazy IO.
  - {name: System.IO.interact, within: []}
  - {name: System.IO.readIO, within: []}
  - {name: System.IO.readLn, within: []}

  # Can succeed in dev, but fail in prod, because of encoding guessing
  # It's also Lazy IO.
  # See https://www.snoyman.com/blog/2016/12/beware-of-readfile/ for more info.
  - {name: System.IO.readFile, within: []}
  - name: Data.Text.IO.readFile, 
    within:
    - "Centjes.FormatSpec"
    - "Centjes.ParseSpec"

  - {name: Data.Text.IO.Lazy.readFile, within: []}

  - {name: Prelude.read, within: []} # Partial, use `Text.Read.readMaybe` instead.

  - {name: nub, within: []} # O(n^2)


  # Still to add
  - {name: decodeUtf8, within: []} # Partial, use decodeUtf8' instead.
  - {name: Prelude.putStrLn, within: []}

  # We don't disallow 'undefined' because of the undefined trick.
  # It wolud be nice if there was a way to automatically check that all usages of undefined were because of the undefined trick...
  - {name: 'error', within: []} # Purposely fails

  # Does unexpected things, see
  # https://github.com/NorfairKing/haskell-WAT#real-double
  - {name: realToFrac, within: []}

  # Does silent truncation:
  # > fromIntegral (300 :: Word) :: Word8
  # 44
  - name: fromIntegral
    within:
      - Centjes.DecimalLiteral
      - Centjes.DecimalLiteral.Gen
