<div .content>
  <h1 .title>
    Syntax

  <h2 .title>
    Introduction

  <p>
    The centjes DSL is used to describe transactions of money accross accounts.

  <p>
    The syntax is machine-readable, and auto-formattable.

  <h2 .title>
    Modules

  <p>
    Centjes data is housed in files with the 
    <code>
      .cent
    extension called modules.
    
  <p>
    Modules consist of 
    <code>
      imports
    and 
    <code>
      declarations
    .

  <p>
    The main centjes file is called
    <code>
      ledger.cen
    and is considered the entry-point for centjes' automation.

  <h2 .title>
    Imports

  <p>
    Imports look like this:

    ^{spliceImportExample importExample}

    This import will import all the declarations of the module at

    <code>
      ./banks/ubs.cent

    (relative to the current module) into the current module.



  <h2 .title>
    Declarations

  <h3 .title>
    Comments

  <p>
    Comments in centjes look like this:

  ^{spliceDeclarationExample $ DeclarationComment $ noLoc "This is a comment"}

  <p>
    There are only line comments, no block comments, and they can only appear as standalone declarations.


  <h3 .title>
    Currency declaration

  <p>
    In order to account for money of a certain currency, you need to declare that currency up front.
    This helps prevent typos in currencies.

  <p>
    A currency is declared like so:

  ^{spliceDeclarationExample $ DeclarationCurrency $ noLoc $ CurrencyDeclaration (noLoc (CurrencySymbol "USD")) (noLoc "0.01") }

  <p>
    This declaration says "There is a currency with symbol
    <code>
      USD
    that has a smallest valid amount of 
    <code>
      0.01
    units.".

  <h3 .title>
    Account

  <p>
    In order to declare how money moved between accounts, we first have to declare accounts as well, just lik we have to with currencies.

  ^{spliceDeclarationExample $ DeclarationAccount $ noLoc $ AccountDeclaration (noLoc "assets:bank") Nothing [] }

  <p>
    This declaration says "There is an account called 
    <code>
      #{AccountName.toText "assets:bank"}
    .".

  <h4 .title>
    Account types

  <p>
    An account must be one of the following types.
    Each type has an associated assertion on the contents of the account.

  <ul>
    <li>
      <code>
        #{AccountType.toText AccountTypeAssets}
      : never strictly negative
    <li>
      <code>
        #{AccountType.toText AccountTypeLiabilities}
      : never strictly positive
    <li>
      <code>
        #{AccountType.toText AccountTypeEquity}
      : never strictly positive
    <li>
      <code>
        #{AccountType.toText AccountTypeExpenses}
      : never strictly negative
    <li>
      <code>
        #{AccountType.toText AccountTypeIncome}
      : never strictly positive
    <li>
      <code>
        #{AccountType.toText AccountTypeOther}

  <p>
    Centjes automatically guesses the type of an account using a substring search.
    For example, an account name
    <code>
      #{AccountName.toText "assets:bank"}
    will imply that the account type is
    <code>
      #{AccountType.toText AccountTypeAssets}

  <p>
    To annotate an account with a type manually, you can add it like so:

  ^{spliceDeclarationExample $ DeclarationAccount $ noLoc $ AccountDeclaration (noLoc "foo:bar") (Just (noLoc AccountTypeAssets)) [] }
      
  <h4 .title>
    Account assertions

  <p>
    An account can have associated assertions.

  <h5 .title>
    Currency assertion

  <p>
    An account currency assertion says that the money in the given account must be of a given currency.
    It is declared as follows:

  ^{spliceDeclarationExample $ DeclarationAccount $ noLoc $ AccountDeclaration (noLoc "assets:bank") Nothing [noLoc (AccountAssertionCurrency (noLoc (CurrencySymbol "USD")))]}
    

  <h3 .title>
    Transaction

  <p>
    Transactions are declared as using a list of postings that have to balance to zero.
    TODO.

  <h3 .title>
    Tag

  <p>
    Transactions can have associated tags.
    TODO

  <h3 .title>
    Price

  <p>
    We can declare the price of a currency expressed in another currency on a given day.
    TODO
